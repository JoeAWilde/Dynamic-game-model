for(z in 1:(100000000){
for(i in 1:10000){
singA[i]<-rand[round(runif(1, 1 , 2),0)]
singB[i]<-rand[round(runif(1, 1 , 2),0)]
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
rm(list=ls())
rand<-c(0,1)
singA<-c()
singB<-c()
SRI<-c()
for(z in 1:100000000){
for(i in 1:10000){
singA[i]<-rand[round(runif(1, 1 , 2),0)]
singB[i]<-rand[round(runif(1, 1 , 2),0)]
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
beep(3)
for(z in 1:100){
for(i in 1:10000){
singA[i]<-rand[round(runif(1, 1 , 2),0)]
singB[i]<-rand[round(runif(1, 1 , 2),0)]
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
rm(list=ls())
rand<-c(0,1)
singA<-c()
singB<-c()
SRI<-c()
for(z in 1:100){
for(i in 1:10000){
singA[i]<-rand[round(runif(1, 1 , 2),0)]
singB[i]<-rand[round(runif(1, 1 , 2),0)]
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
hist(SRI)
rm(list=ls())
rand<-c(0,1)
singA<-c()
singB<-c()
SRI<-c()
for(z in 1:100000){
for(i in 1:100000){
singA[i]<-rand[round(runif(1, 1 , 2),0)]
singB[i]<-rand[round(runif(1, 1 , 2),0)]
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
hist(SRI)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
round(runif(1, 0 , 1),0)
rm(list=ls())
singA<-c()
singB<-c()
SRI<-c()
for(z in 1:100000){
for(i in 1:100000){
singA[i]<-round(runif(1, 0 , 1),0)
singB[i]<-round(runif(1, 0 , 1),0)
}
df<-data.frame(singA,singB)
df$sum<-rowSums(df)
x<-length(which(df$sum==2))
yAB<-length(which(df$sum==1))
SRI[z]<-x/(x+yAB)
}
data<-c()
for(i in 1:9){
data[i]<-dbinom(i,size=9, prob=0.5)
}
sum(data)
data<-c()
for(i in 0:9){
data[i]<-dbinom(i,size=9, prob=0.5)
}
sum(data)
data<-c()
for(i in 0:10){
data[i]<-dbinom(i,size=9, prob=0.5)
}
sum(data)
data<-c()
for(i in seq(0,1,0.05){
for(i in seq(0,1,0.05)){
data[i]<-dbinom(6,size=9, prob=i)
}
sum(data)
data<-c()
for(i in seq(0,1,0.05)){
data[i]<-dbinom(6,size=9, prob=i)
}
sum(data)
data<-c()
for(i in seq(0,1,0.05)){
data[i*20]<-dbinom(6,size=9, prob=i)
}
sum(data)
data<-c()
for(i in seq(0,1,0.01)){
data[i*20]<-dbinom(6,size=9, prob=i)
}
sum(data)
data<-c()
for(i in seq(0,1,0.001)){
data[i*20]<-dbinom(6,size=9, prob=i)
}
sum(data)
?with()
p_grid<-seq(0,1,lenght.out = 20)
p_grid<-seq(0,1,length.out = 20)
prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
likelihood<-dbinom(6,9,prob = p_grid)
unstd.post<-likelihood*prior
post<-unstd.post/sum(unstd.post)
sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
#Rethinking#
#Chapter 2 ####
p_grid<-seq(0,1,length.out = 20) #defines the grid
#prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
prior<-ifelse(p_grid<0.5,0,1)
likelihood<-dbinom(6,9,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
#prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
#prior<-ifelse(p_grid<0.5,0,1)
prior<-exp(-5*abs(p_grid-0.5))
#Rethinking#
#Chapter 2 ####
p_grid<-seq(0,1,length.out = 20) #defines the grid
#prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
#prior<-ifelse(p_grid<0.5,0,1)
prior<-exp(-5*abs(p_grid-0.5))
likelihood<-dbinom(6,9,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
#Rethinking#
#Chapter 2 ####
p_grid<-seq(0,1,length.out = 20) #defines the grid
prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
#prior<-ifelse(p_grid<0.5,0,1)
#prior<-exp(-5*abs(p_grid-0.5))
likelihood<-dbinom(6,9,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
log.post<-log10(post)
plot(p_grid, log.post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
#code 2.6 ####
library(rethinking)
globe.qa<-quap(
alist(
W ~ dbinom(W+L, p),
p ~ dunif(0,1)
),
data = list(W=6,L=3) )
precis(globe.qa)
p_grid<-seq(0,1,length.out = 20) #defines the grid
prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
likelihood<-dbinom(3,3,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
p_grid<-seq(0,1,length.out = 20) #defines the grid
prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
likelihood<-dbinom(3,4,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
p_grid<-seq(0,1,length.out = 20) #defines the grid
prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
likelihood<-dbinom(5,7,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
p_grid<-seq(0,1,length.out = 20) #defines the grid
#prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
prior<-ifelse(p<0.5, 0, 1)
likelihood<-dbinom(3,3,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
p_grid<-seq(0,1,length.out = 20) #defines the grid
#prior<-rep(1,20) #defines a flat prior (likelihood of 1 for each value in the grid)
prior<-ifelse(p_grid<0.5, 0, 1)
likelihood<-dbinom(3,3,prob = p_grid) #computes the likelihood of each parameter value in the grid, given the data is binomially distributed
unstd.post<-likelihood*prior #calculates the unstandardised posterior for each parameter value by multiplying it's likelihood by the prior for the value
post<-unstd.post/sum(unstd.post)
plot(p_grid, post, type = "b",
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
reticulate::repl_python()
print("Hello, world!")
yes
rbinom(1, size = 2, prob = 0.7)
?rbinom
rbinom(10, size = 2, prob = 0.7)
rbinom(10, size = 8, prob = 0.7)
rbinom(10, size = 2, prob = 0.7)
dummy_w<-rbinom(1e5, size = 2, prob = 0.7)
table(dummy_w)/1e5
dummy_w<-rbinom(1e5, size = 9, prob = 0.7)
table(dummy_w)/1e5
simplehist(dummy_w, xlab = "dummy water count")
library(rethinking)
simplehist(dummy_w, xlab = "dummy water count")
dummy_w<-rbinom(1e5, size = 100, prob = 0.7)
simplehist(dummy_w, xlab = "dummy water count")
library(rethinking)
data(Howell1)
d<-data(Howell1)
data(Howell1)
d<-Howell1
d2<-d[d$age>=18]
d2<-d[d$age>=18,]
flist<-alist(
height ~ dnorm(mu,sigma),
mu~dnorm(178,20),
sigma~dunif(0,50)
)
View(flist)
m4.1<-quap(flist, data=d2)
precis(m4.1)
flist2<-alist(
height ~ dnorm(mu,sigma),
mu~dnorm(178,0.1),
sigma~dunif(0,50)
)
m4.2<-quap(flist2, data=d2)
precis(m4.2)
voc(m4.1)
vcov(m4.1)
diag(vcov(m4.1))
cov2cor(vcov(m4.1))
post<-extract.samples(m4.1,n=1e4)
head(post)
precis(post)
plot(post)
plot(d2$height, d2$weight)
xbar<-mean(d2$weight)
flist3<-alist(
height~dnorm(mu,sigma),
mu<-a+b*(weight-xbar),
a~dnorm(178,20),
b~dlnorm(0,1),
sigma~dunif(0,50)
)
m4.3<-quap(flist3,data=d2)
precis(m4.3)
vcov(m4.3)
install.packages("tinytex")
lirary(tinytex)
library(tinytex)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
?rlnorm
rm(list=ls())
library(rethinking)
d<-data(WaffleDivorce)
d$A<-scale(d$MedianAgeMarriage)
View(WaffleDivorce)
d<-WaffleDivorce
d$A<-scale(d$MedianAgeMarriage)
d$D<-scale(d$Divorce)
sd(d$MedianAgeMarriage)
m5.1<-quap(
alist(
D~dnorm(mu,sigma),
mu<-a+bA*A,
a~dnorm(0.0.2),
bA~dnorm(0,0.5),
sigma~dexp(1)
), data = d
)
m5.1<-quap(
alist(
D~dnorm(mu,sigma),
mu<-a+bA*A,
a~dnorm(0.0.2),
bA~dnorm(0,0.5),
sigma~dexp(1)
), data = d
)
m5.1<-quap(
alist(
D~dnorm(mu,sigma),
mu<-a+bA*A,
a~dnorm(0,0.2),
bA~dnorm(0,0.5),
sigma~dexp(1)
), data = d
)
extract.prior(m5.1)
prior<-extract.prior(m5.1)
mu<-link(m5.1, post=prior, data = list(A=c(-2,2)))
plot(NULL, xlim=c(-2,2),ylim=c(-2,2))
for(i in 1:50) lines(c(-2,2), mu[i,], col=col.alpha("black,0.4"))
for(i in 1:50) lines(c(-2,2), mu[i,], col=col.alpha("black",0.4))
A_seq <- seq( from=-3 , to=3.2 , length.out=30 )
mu <- link( m5.1 , data=list(A=A_seq) )
mu.mean <- apply( mu , 2, mean )
mu.PI <- apply( mu , 2 , PI )
plot( D ~ A , data=d , col=rangi2 )
lines( A_seq , mu.mean , lwd=2 )
shade( mu.PI , A_seq )
rm(list=ls())
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
mdf<-read.table("freqDist.csv", header=F, sep = ",")
View(mdf)
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
View(mdf)
print(sum(mdf[,1]))
{
print(sum(mdf[,1]))
}
length(mdf)
{
print(sum(mdf[,i]))
}
for(i in 1:length(mdf))
print(sum(mdf[,i]))
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf))
{
print(sum(mdf[,i])+sum(tmdf[,i]))
}
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/sum(mdf[,i])
tmdf[,i]<-tmdf[,i]/sum(tmdf[,i])
print(paste("new sum = ",sum(mdf[,i])+sum(tmdf[,i])))
}
#for(i in 1:length(mdf)){
i<-1
print(sum(mdf[,i])+sum(tmdf[,i]))
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
#for(i in 1:length(mdf)){
i<-1
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/sum(mdf[,i])
sum(mdf[,i])
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/sum(tmdf[,i])
}
sum(tmdf[,i])
print(paste("new sum = ",sum(mdf[,i])+sum(tmdf[,i])))
#for(i in 1:length(mdf)){
i<-2
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/sum(mdf[,i])
sum(mdf[,i])
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/sum(tmdf[,i])
}
sum(tmdf[,i])
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
#for(i in 1:length(mdf)){
i<-2
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
newmdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
newtmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
print(paste("new sum = ",sum(newmdf[,i])+sum(newtmdf[,i])))
}
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
newmdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
newtmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
#print(paste("new sum = ",sum(newmdf[,i])+sum(newtmdf[,i])))
}
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
print(paste("new sum = ",sum(newmdf[,i])+sum(newtmdf[,i])))
}
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
print(paste("new sum = ",sum(mdf[,i])+sum(tmdf[,i])))
}
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
print(paste("\n new sum = ",sum(mdf[,i])+sum(tmdf[,i])))
}
library(ggplot2)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/.vscode")
rm(list=ls())
mdf<-read.table("freqDist.csv", header=F, sep = ",")
tmdf<-read.table("timeOutFreqDist.csv", header=F, sep=",")
for(i in 1:length(mdf)){
print(sum(mdf[,i])+sum(tmdf[,i]))
mdf[,i]<-mdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
if(sum(tmdf[,i])>0){
tmdf[,i]<-tmdf[,i]/(sum(mdf[,i])+sum(tmdf[,i]))
}
print(paste("new sum = ",sum(mdf[,i])+sum(tmdf[,i])))
print("")
}
(0.3/1.1)+(0.1/1.1)+(0.05/1.1)+(0.2/1.1)+(0.3/1.1)+(0.1/1.1)
0.3*0.9
(0.3*0.9)+(0.1*0.9)+(0.05*0.9)+(0.2*0.9)+(0.3*0.9)+(0.1*0.9)
t<-c(0.3,0.1,0.05,0.2,0.3,0.1)
sum(t)
newt<-t/sum(t)
sum(newt)
View(mdf)
