library(tidyr)
library(ggplot2)
library(officer)
library(rvg)
library(tidyverse)
setwd("C:/Users/jw777/OneDrive - University of Exeter/Dynamic programming/0.6 C++/newDead/output_files")
rm(list=ls())
tSteps<-50
filename<-"twoMorphsTest"
doc <- read_pptx()
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#LARGE
#plotting the best response strategy####
BRturnon <- TRUE
# if(BRturnon == TRUE){
br<-read.table("largeBRstrat.txt", header=F, sep = ",")
eMax<-nrow(br)
tides<-(length(br))/(tSteps+1)
eLevels<- 0:(eMax-1)
br<-cbind(eLevels, br)
vDfLength <- paste("V",(length(br)-1),sep="")
dataLong<-gather(data = br, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
timestepNew<-rep_len(rep(1:(tSteps+1), each = eMax), length.out = nrow(dataLong))
dataLong$timestep <- as.numeric(timestepNew)
names(dataLong)<-c("energy","timestep","pWave")
dataLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
dataLong <- subset(dataLong, !timestep %in% c(50, 51))
dataLong$timestep <- as.numeric(dataLong$timestep)
dataLong$pWave <- as.numeric(dataLong$pWave)
dataLong$energy <- as.numeric(dataLong$energy)
midTide <- subset(dataLong, tide == (tides/2))
midTide$bin <- ifelse(midTide$pWave>0.5, 1, 0)
a<-ggplot(data=midTide, aes(x = timestep, y = energy, fill = pWave))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10,digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0,eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,1),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("best response strategy")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = a, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
a.2<-ggplot(data=midTide, aes(x = timestep, y = energy, fill = bin))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,
round(tSteps/10,digits = 0)),
limits = c(-1, tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,1),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("best response strategy")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = a.2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting population frequency distribution####
#markovTurnon<-TRUE
# if(markovTurnon==TRUE){
fd<-read.table("largeFreqDist.txt", header=F, sep = ",")
fd<-cbind(eLevels, fd)
vDfLength <- paste("V",(length(fd)-1),sep="")
fdLong<-gather(data = fd, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
fdLong$timestep <- as.numeric(timestepNew)
names(fdLong)<-c("energy","timestep","freq")
fdLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
fdLong <- subset(fdLong, !timestep %in% c(50, 51))
fdLong$freq <- as.numeric(fdLong$freq)
fdMidTide <- subset(fdLong, tide == (tides/2))
maxFreq <- max(fdMidTide$freq)
b<-ggplot(data=fdMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,maxFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("non-timeout population frequency distribution BEWARE THE SCALE")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = b, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting population in timeout frequency distribution####
timeoutTurnon<-TRUE
# if(timeoutTurnon==TRUE){
tm<-read.table("largeFreqDistTimeout.txt", header=F, sep = ",")
tm<-cbind(eLevels, tm)
vDfLength <- paste("V",(length(tm)-1),sep="")
tmLong<-gather(data = tm, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
tmLong$timestep<-as.numeric(timestepNew)
names(tmLong)<-c("energy","timestep","freq")
tmLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
tmLong <- subset(tmLong, !timestep %in% c(50, 51))
tmLong$freq <- as.numeric(tmLong$freq)
tmMidTide <- subset(tmLong, !timestep %in% c(50, 51))
maxTimeoutFreq <- max(tmMidTide$freq)
c<-ggplot(data=tmMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = c(seq(0,eMax,round(eMax/10, digits = 0))))+
scale_fill_gradientn(limits=c(0,maxTimeoutFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("timeout population frequency distribution (BEWARE the scale)")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = c, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount of waving ####
expWavTurnOn <- TRUE
# if(expWavTurnOn == TRUE){
wav<-midTide$pWave * fdMidTide$freq
expLong<-data.frame(energy = midTide$energy,
wav =  wav,
timestep = fdMidTide$timestep)
expAgg<-aggregate(.~timestep, data = expLong, FUN = sum)
d<-ggplot()+
geom_line(data=expAgg, aes(x = timestep, y = wav), size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))+
xlab("Time step")+
ylab("Expected proportion of population waving")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion of population waving across low tide")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = d, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount dead ####
phiDead <- read.table("largePhiDead.txt", header=F, sep = ",")
phiDeadLong_temp <- c()
for(i in 1:length(phiDead)){
phiDeadLong_temp[i] <- phiDead[1,i]
}
phiDeadLong_temp <- phiDeadLong_temp[-c(which(phiDeadLong_temp == "HT" | is.na(phiDeadLong_temp)), length(phiDeadLong_temp))]
phiDeadLong <- data.frame(dead = as.numeric(phiDeadLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiDeadLongMid <- subset(phiDeadLong, tide == tides/2)
maxDead <- max(phiDeadLongMid$dead)
e<-ggplot()+
geom_line(data=phiDeadLongMid, aes(x = tStep, y = dead), colour = "red",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxDead+(maxDead/10)))+
xlab("Time step")+
ylab("Expected proportion to have kicked the bucket")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion to have kicked the bucket across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = e, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount mating ####
phiMate <- read.table("largePhiMate.txt", header=F, sep = ",")
phiMateLong_temp <- c()
for(i in 1:length(phiMate)){
phiMateLong_temp[i] <- phiMate[1,i]
}
phiMateLong_temp <- phiMateLong_temp[-c(which(phiMateLong_temp == "HT" | is.na(phiMateLong_temp)), length(phiMateLong_temp))]
phiMateLong <- data.frame(mate = as.numeric(phiMateLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiMateLong <- subset(phiMateLong, tStep != 50)
phiMateLongMid <- subset(phiMateLong, tide == tides/2)
maxMate <- max(phiMateLongMid$mate)
f<-ggplot()+
geom_line(data=phiMateLongMid, aes(x = tStep, y = mate), colour = "orange",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxMate+(maxMate/10)))+
xlab("Time step")+
ylab("Expected proportion to mate (per timestep)")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion to mate (per timestep) across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = f, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#SMALL
#plotting the best response strategy####
BRturnon <- TRUE
# if(BRturnon == TRUE){
br<-read.table("smallBRstrat.txt", header=F, sep = ",")
eMax<-nrow(br)
tides<-(length(br))/(tSteps+1)
eLevels<- 0:(eMax-1)
br<-cbind(eLevels, br)
vDfLength <- paste("V",(length(br)-1),sep="")
dataLong<-gather(data = br, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
timestepNew<-rep_len(rep(1:(tSteps+1), each = eMax), length.out = nrow(dataLong))
dataLong$timestep <- as.numeric(timestepNew)
names(dataLong)<-c("energy","timestep","pWave")
dataLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
dataLong <- subset(dataLong, !timestep %in% c(50, 51))
dataLong$timestep <- as.numeric(dataLong$timestep)
dataLong$pWave <- as.numeric(dataLong$pWave)
dataLong$energy <- as.numeric(dataLong$energy)
midTide <- subset(dataLong, tide == (tides/2))
midTide$bin <- ifelse(midTide$pWave>0.5, 1, 0)
a<-ggplot(data=midTide, aes(x = timestep, y = energy, fill = pWave))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10,digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0,eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,1),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("best response strategy")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = a, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
a.2<-ggplot(data=midTide, aes(x = timestep, y = energy, fill = bin))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,
round(tSteps/10,digits = 0)),
limits = c(-1, tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,1),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("best response strategy")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = a.2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting population frequency distribution####
#markovTurnon<-TRUE
# if(markovTurnon==TRUE){
fd<-read.table("smallFreqDist.txt", header=F, sep = ",")
fd<-cbind(eLevels, fd)
vDfLength <- paste("V",(length(fd)-1),sep="")
fdLong<-gather(data = fd, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
fdLong$timestep <- as.numeric(timestepNew)
names(fdLong)<-c("energy","timestep","freq")
fdLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
fdLong <- subset(fdLong, !timestep %in% c(50, 51))
fdLong$freq <- as.numeric(fdLong$freq)
fdMidTide <- subset(fdLong, tide == (tides/2))
maxFreq <- max(fdMidTide$freq)
b<-ggplot(data=fdMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,maxFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("non-timeout population frequency distribution BEWARE THE SCALE")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = b, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting population in timeout frequency distribution####
timeoutTurnon<-TRUE
# if(timeoutTurnon==TRUE){
tm<-read.table("smallFreqDistTimeout.txt", header=F, sep = ",")
tm<-cbind(eLevels, tm)
vDfLength <- paste("V",(length(tm)-1),sep="")
tmLong<-gather(data = tm, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
tmLong$timestep<-as.numeric(timestepNew)
names(tmLong)<-c("energy","timestep","freq")
tmLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
tmLong <- subset(tmLong, !timestep %in% c(50, 51))
tmLong$freq <- as.numeric(tmLong$freq)
tmMidTide <- subset(tmLong, !timestep %in% c(50, 51))
maxTimeoutFreq <- max(tmMidTide$freq)
c<-ggplot(data=tmMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = c(seq(0,eMax,round(eMax/10, digits = 0))))+
scale_fill_gradientn(limits=c(0,maxTimeoutFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("timeout population frequency distribution (BEWARE the scale)")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = c, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount of waving ####
expWavTurnOn <- TRUE
# if(expWavTurnOn == TRUE){
wav<-midTide$pWave * fdMidTide$freq
expLong<-data.frame(energy = midTide$energy,
wav =  wav,
timestep = fdMidTide$timestep)
expAgg<-aggregate(.~timestep, data = expLong, FUN = sum)
d<-ggplot()+
geom_line(data=expAgg, aes(x = timestep, y = wav), size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))+
xlab("Time step")+
ylab("Expected proportion of population waving")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion of population waving across low tide")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = d, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount dead ####
phiDead <- read.table("smallPhiDead.txt", header=F, sep = ",")
phiDeadLong_temp <- c()
for(i in 1:length(phiDead)){
phiDeadLong_temp[i] <- phiDead[1,i]
}
phiDeadLong_temp <- phiDeadLong_temp[-c(which(phiDeadLong_temp == "HT" | is.na(phiDeadLong_temp)), length(phiDeadLong_temp))]
phiDeadLong <- data.frame(dead = as.numeric(phiDeadLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiDeadLongMid <- subset(phiDeadLong, tide == tides/2)
maxDead <- max(phiDeadLongMid$dead)
e<-ggplot()+
geom_line(data=phiDeadLongMid, aes(x = tStep, y = dead), colour = "red",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxDead+(maxDead/10)))+
xlab("Time step")+
ylab("Expected proportion to have kicked the bucket")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion to have kicked the bucket across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = e, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
#plotting the expected amount mating ####
phiMate <- read.table("smallPhiMate.txt", header=F, sep = ",")
phiMateLong_temp <- c()
for(i in 1:length(phiMate)){
phiMateLong_temp[i] <- phiMate[1,i]
}
phiMateLong_temp <- phiMateLong_temp[-c(which(phiMateLong_temp == "HT" | is.na(phiMateLong_temp)), length(phiMateLong_temp))]
phiMateLong <- data.frame(mate = as.numeric(phiMateLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiMateLong <- subset(phiMateLong, tStep != 50)
phiMateLongMid <- subset(phiMateLong, tide == tides/2)
maxMate <- max(phiMateLongMid$mate)
f<-ggplot()+
geom_line(data=phiMateLongMid, aes(x = tStep, y = mate), colour = "orange",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxMate+(maxMate/10)))+
xlab("Time step")+
ylab("Expected proportion to mate (per timestep)")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("Expected proportion to mate (per timestep) across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = f, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
