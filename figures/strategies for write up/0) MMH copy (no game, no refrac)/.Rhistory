fdl<-cbind(eLevels, fdl)
vDfLength <- paste("V",(length(fdl)-1),sep="")
fdlLong<-gather(data = fdl, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
fdlLong$timestep <- as.numeric(timestepNew)
names(fdlLong)<-c("energy","timestep","freq")
fdlLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
fdlLong <- subset(fdlLong, !timestep %in% c(tSteps, tSteps+1))
fdlLong$freq <- as.numeric(fdlLong$freq)
fdlMidTide <- subset(fdlLong, tide == (tides/2))
maxFreq <- max(fdlMidTide$freq)
b1<-ggplot(data=fdlMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,maxFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("LARGE MALE non-timeout population frequency distribution BEWARE THE SCALE")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = b1, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
fds<-read.table("smallFreqDist.txt", header=F, sep = ",")
fds<-cbind(eLevels, fds)
vDfLength <- paste("V",(length(fds)-1),sep="")
fdsLong<-gather(data = fds, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
fdsLong$timestep <- as.numeric(timestepNew)
names(fdsLong)<-c("energy","timestep","freq")
fdsLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
fdsLong <- subset(fdsLong, !timestep %in% c(tSteps, tSteps+1))
fdsLong$freq <- as.numeric(fdsLong$freq)
fdsMidTide <- subset(fdsLong, tide == (tides/2))
maxFreq <- max(fdsMidTide$freq)
b2<-ggplot(data=fdsMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)),
limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, eMax, round(eMax/10, digits = 0)))+
scale_fill_gradientn(limits=c(0,maxFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("SMALL MALE non-timeout population frequency distribution BEWARE THE SCALE")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = b2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#plotting population in time out frequency distribution####
tml<-read.table("largeFreqDistTimeout.txt", header=F, sep = ",")
tml<-cbind(eLevels, tml)
vDfLength <- paste("V",(length(tml)-1),sep="")
tmlLong<-gather(data = tml, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
tmlLong$timestep<-as.numeric(timestepNew)
names(tmlLong)<-c("energy","timestep","freq")
tmlLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
tmlLong <- subset(tmlLong, !timestep %in% c(tSteps, tSteps+1))
tmlLong$freq <- as.numeric(tmlLong$freq)
tmlMidTide <- subset(tmlLong, !timestep %in% c(tSteps, tSteps+1))
maxTimeoutFreq <- max(tmlMidTide$freq)
c1<-ggplot(data=tmlMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = c(seq(0,eMax,round(eMax/10, digits = 0))))+
scale_fill_gradientn(limits=c(0,maxTimeoutFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("LARGE MALE timeout population frequency distribution (BEWARE the scale)")
# c1
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = c1, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
tms<-read.table("smallFreqDistTimeout.txt", header=F, sep = ",")
tms<-cbind(eLevels, tms)
vDfLength <- paste("V",(length(tms)-1),sep="")
tmsLong<-gather(data = tms, timestep, pWave, V1:all_of(vDfLength),factor_key = FALSE)
tmsLong$timestep<-as.numeric(timestepNew)
names(tmsLong)<-c("energy","timestep","freq")
tmsLong$tide <- rep(1:tides, each = (eMax*(tSteps+1)))
tmsLong <- subset(tmsLong, !timestep %in% c(tSteps, tSteps+1))
tmsLong$freq <- as.numeric(tmsLong$freq)
tmsMidTide <- subset(tmsLong, !timestep %in% c(tSteps, tSteps+1))
maxTimeoutFreq <- max(tmsMidTide$freq)
c2<-ggplot(data=tmsMidTide, aes(x = timestep, y = energy, fill = freq))+
geom_tile()+
scale_x_continuous(breaks = seq(0,tSteps,round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = c(seq(0,eMax,round(eMax/10, digits = 0))))+
scale_fill_gradientn(limits=c(0,maxTimeoutFreq),colors = c(low = "olivedrab", medium = "yellow", high = "red"))+
xlab("Time step")+
ylab("Energy")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_hline(yintercept = c(seq(0.5,eMax-0.5, 1)), alpha = 0.1)+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("SMALL MALE timeout population frequency distribution (BEWARE the scale)")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = c2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#plotting the expected amount of waving ####
wavL<-midTideL$pWave * fdlMidTide$freq
expLongL<-data.frame(energy = midTideL$energy,
wavL =  wavL,
timestep = fdlMidTide$timestep)
expAggL<-aggregate(.~timestep, data = expLongL, FUN = sum)
d1<-ggplot()+
geom_line(data=expAggL, aes(x = timestep, y = wavL), linewidth=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))+
xlab("Time step")+
ylab("Expected proportion of population waving")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("LARGE MALE Expected proportion of population waving across low tide")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = d1, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
wavS<-midTideS$pWave * fdsMidTide$freq
expLongS<-data.frame(energy = midTideS$energy,
wavS =  wavS,
timestep = fdsMidTide$timestep)
expAggS<-aggregate(.~timestep, data = expLongS, FUN = sum)
d2<-ggplot()+
geom_line(data=expAggS, aes(x = timestep, y = wavS), size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1))+
xlab("Time step")+
ylab("Expected proportion of population waving")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("SMALL MALE Expected proportion of population waving across low tide")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = d2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#plotting the expected amount dead ####
phiDeadL <- read.table("largephiDead.txt", header=F, sep = ",")
phiDeadLLong_temp <- c()
for(i in 1:length(phiDeadL)){
phiDeadLLong_temp[i] <- phiDeadL[1,i]
}
phiDeadLLong_temp <- phiDeadLLong_temp[-c(which(phiDeadLLong_temp == "HT" | is.na(phiDeadLLong_temp)), length(phiDeadLLong_temp))]
phiDeadLLong <- data.frame(dead = as.numeric(phiDeadLLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiDeadLLongMid <- subset(phiDeadLLong, tide == tides/2)
maxDead <- max(phiDeadLLongMid$dead)
e1<-ggplot()+
geom_line(data=phiDeadLLongMid, aes(x = tStep, y = dead), colour = "red",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxDead+(maxDead/10)))+
xlab("Time step")+
ylab("Expected proportion to have kicked the bucket")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("LARGE MALE Expected proportion to have kicked the bucket across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = e1, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
phiDeadS <- read.table("smallphiDead.txt", header=F, sep = ",")
phiDeadSLong_temp <- c()
for(i in 1:length(phiDeadS)){
phiDeadSLong_temp[i] <- phiDeadS[1,i]
}
phiDeadSLong_temp <- phiDeadSLong_temp[-c(which(phiDeadSLong_temp == "HT" | is.na(phiDeadSLong_temp)), length(phiDeadSLong_temp))]
phiDeadSLong <- data.frame(dead = as.numeric(phiDeadSLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiDeadSLongMid <- subset(phiDeadSLong, tide == tides/2)
maxDead <- max(phiDeadSLongMid$dead)
e2<-ggplot()+
geom_line(data=phiDeadSLongMid, aes(x = tStep, y = dead), colour = "red",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxDead+(maxDead/10)))+
xlab("Time step")+
ylab("Expected proportion to have kicked the bucket")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("SMALL MALE Expected proportion to have kicked the bucket across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = e2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#plotting the expected amount mating ####
phiMateL <- read.table("largephiMate.txt", header=F, sep = ",")
phiMateLLong_temp <- c()
for(i in 1:length(phiMateL)){
phiMateLLong_temp[i] <- phiMateL[1,i]
}
phiMateLLong_temp <- phiMateLLong_temp[-c(which(phiMateLLong_temp == "HT" | is.na(phiMateLLong_temp)), length(phiMateLLong_temp))]
phiMateLLong <- data.frame(mate = as.numeric(phiMateLLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiMateLLong <- subset(phiMateLLong, tStep != (tSteps+1))
phiMateLLongMid <- subset(phiMateLLong, tide == tides/2)
maxMate <- max(phiMateLLongMid$mate)
f1<-ggplot()+
geom_line(data=phiMateLLongMid, aes(x = tStep, y = mate), colour = "orange",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxMate+(maxMate/10)))+
xlab("Time step")+
ylab("Expected proportion to mate (per timestep)")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("LARGE MALE Expected proportion to mate (per timestep) across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = f1, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
phiMateS <- read.table("smallphiMate.txt", header=F, sep = ",")
phiMateSLong_temp <- c()
for(i in 1:length(phiMateS)){
phiMateSLong_temp[i] <- phiMateS[1,i]
}
phiMateSLong_temp <- phiMateSLong_temp[-c(which(phiMateSLong_temp == "HT" | is.na(phiMateSLong_temp)), length(phiMateSLong_temp))]
phiMateSLong <- data.frame(mate = as.numeric(phiMateSLong_temp),
tStep = rep_len((1:tSteps), tSteps*tides),
tide = rep(1:tides, each = tSteps))
phiMateSLong <- subset(phiMateSLong, tStep != (tSteps-1))
phiMateSLongMid <- subset(phiMateSLong, tide == tides/2)
maxMate <- max(phiMateSLongMid$mate)
f2<-ggplot()+
geom_line(data=phiMateSLongMid, aes(x = tStep, y = mate), colour = "orange",  size=2)+
scale_x_continuous(breaks = seq(0, tSteps, round(tSteps/10, digits = 0)), limits = c(-1,tSteps+1))+
scale_y_continuous(limits = c(0, maxMate+(maxMate/10)))+
xlab("Time step")+
ylab("Expected proportion to mate (per timestep)")+
theme(panel.grid.major= element_blank(), panel.grid.minor= element_blank(),
panel.background = element_blank(), axis.ticks = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 20))+
geom_vline(xintercept = c(seq(0.5,tSteps+0.5, 1)), alpha = 0.1)+
ggtitle("SMALL MALE Expected proportion to mate (per timestep) across low tide BEWARE THE Y AXIS LIMITS")
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = f2, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#Plotting simulation results ####
gc()
colours <- c("Large" = "purple3", "Small" = "orange3")
#male sizes ####
sizes <- unlist(read.table("simSizes.txt", sep = ",", header = F)[1,])
sizes_chr <- ifelse(sizes == 1, "Large", "Small")
#energy ####
HT_cols <- seq(tSteps+1, tides*(tSteps+1), tSteps+1)
energy <- read.table("simEnergy.txt", sep = ",", header = F) %>%
.[,-HT_cols]
N <- nrow(energy)
mid_tsteps <- (((tides/2)-2) * (tSteps - 1)) : (((tides/2)+2) * (tSteps - 1))
for(z in 1:N) {
if(z == 1) {
e_list <- unlist(as.numeric(energy[z,]))
size_list <- rep_len(sizes_chr[z], tSteps * tides)
} else {
e_list <- append(e_list, unlist(as.numeric(energy[z,])))
size_list <- append(size_list, rep_len(sizes_chr[z], tSteps * tides))
}
if(length(e_list) != length(size_list)){
print("Lists not of equal length, breaking loop!")
break
}
}
#make purple line on plot ignore the dead individuals
e_df <- data.frame(
tide = rep(1:tides, each = tSteps),
tStep = rep_len(0:(tSteps-1), length(e_list)),
overall_tStep = rep_len(0:((tSteps)*tides), length(energy)),
ID = factor(rep(1:N, each = length(energy))),
size = size_list,
e = e_list
)
rm(energy, e_list, size_list)
g <- ggplot() +
geom_vline(aes(xintercept = seq(0, (tides * tSteps), tSteps)), linetype = "dashed", alpha = 0.7) +
geom_line(data = e_df[e_df$ID %in% sample(200, 50, replace = T),], aes(x = overall_tStep, y = e, group = ID),
colour = "grey", alpha = 0.6, show.legend = F, linewidth = 1.5) +
geom_smooth(data= e_df[e_df$size == "Large",], aes(x = overall_tStep, y = e, colour = "Large"),
se = F, show.legend = T, linewidth = 2) +
geom_smooth(data= e_df[e_df$size == "Small",], aes(x = overall_tStep, y = e, colour = "Small"),
se = F, show.legend = T, linewidth = 2) +
xlab("Timestep") +
ylab("Energy level") +
xlim(min(mid_tsteps), max(mid_tsteps)) +
theme_bw(base_size = 20) +
scale_colour_manual(values = colours, name = "Size")
#g
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = g, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#matings ####
matings <- read.table("simMating.txt", sep = ",", header = F) %>%
.[,-HT_cols]
for(z in 1:N) {
if(z == 1) {
m_list <- unlist(as.numeric(matings[z,]))
} else {
m_list <- append(m_list, unlist(as.numeric(matings[z,])))
}
}
m_df <- data.frame(
tide = e_df$tide,
tStep = e_df$tStep,
overall_tStep = e_df$overall_tStep,
ID = e_df$ID,
size = e_df$size,
m = m_list
)
rm(matings, m_list)
h <- ggplot() +
geom_vline(aes(xintercept = seq(0, (tides * tSteps), tSteps)), linetype = "dashed", alpha = 0.7) +
geom_line(data = m_df[m_df$ID %in% sample(200, 50, replace = T),], aes(x = overall_tStep, y = m, group = ID),
colour = "grey", alpha = 0.6, show.legend = F, linewidth = 1.5) +
geom_smooth(data= m_df[m_df$size == "Large",], aes(x = overall_tStep, y = m, colour = "Large"),
se = F, show.legend = T, linewidth = 2) +
geom_smooth(data= m_df[m_df$size == "Small",], aes(x = overall_tStep, y = m, colour = "Small"),
se = F, show.legend = T, linewidth = 2) +
xlab("Timestep") +
ylab("Number of matings") +
theme_bw(base_size = 20) +
scale_colour_manual(values = colours, name = "Size")
#h
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = h, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#lifespan ####
alive <- read.table("simAlive.txt", sep = ",", header = F) %>%
.[,-HT_cols]
for(z in 1:N) {
if(z == 1) {
a_list <- unlist(as.numeric(alive[z,]))
} else {
a_list <- append(a_list, unlist(as.numeric(alive[z,])))
}
}
a_df <- data.frame(
tide = e_df$tide,
tStep = e_df$tStep,
overall_tStep = e_df$overall_tStep,
ID = e_df$ID,
size = e_df$size,
a = a_list
)
rm(alive, a_list)
for(t in 0:((tSteps-1)*tides)) {
if(t == 0) {
prop_La <- c(sum(a_df$a[a_df$overall_tStep == t & a_df$size == "Large"]) / sum(sizes))
prop_Sa <- c(sum(a_df$a[a_df$overall_tStep == t & a_df$size == "Small"]) / (N-sum(sizes)))
} else {
prop_La <- append(prop_La, sum(a_df$a[a_df$overall_tStep == t & a_df$size == "Large"]) / sum(sizes))
prop_Sa <- append(prop_Sa, sum(a_df$a[a_df$overall_tStep == t & a_df$size == "Small"]) / (N - sum(sizes)))
}
}
propa_df <- data.frame(
overall_tStep = 0:((tSteps-1)*tides),
prop_La,
prop_Sa
)
i <- ggplot() +
geom_vline(aes(xintercept = seq(0, (tides * tSteps), tSteps)), linetype = "dashed", alpha = 0.7) +
geom_line(data= propa_df, aes(x = overall_tStep, y = prop_La, colour = "Large"),
show.legend = T, linewidth = 2) +
geom_line(data= propa_df, aes(x = overall_tStep, y = prop_Sa, colour = "Small"),
show.legend = T, linewidth = 2) +
xlab("Timestep") +
ylab("Proportion alive") +
ylim(0, 1) +
theme_bw(base_size = 20) +
scale_colour_manual(values = colours, name = "Size")
#i
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = i, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
#prop waving ####
behav <- read.table("simBehav.txt", sep = ",", header = F, fileEncoding="latin1")%>%
.[,-HT_cols]
for(z in 1:N) {
if(z == 1) {
b_list <- unlist(behav[z,])
} else {
b_list <- append(b_list, unlist(behav[z,]))
}
}
b_df <- data.frame(
tide = e_df$tide,
tStep = e_df$tStep,
overall_tStep = e_df$overall_tStep,
ID = e_df$ID,
size = e_df$size,
b = b_list
)
rm(behav, b_list)
b_df$wv <- ifelse(b_df$b %in% c("W", "w"), 1, 0)
for(t in 0:((tSteps-1)*tides)) {
if(t == 0) {
prop_Lw <- c(sum(b_df$wv[b_df$overall_tStep == t & b_df$size == "Large"]) / sum(sizes))
prop_Sw <- c(sum(b_df$wv[b_df$overall_tStep == t & b_df$size == "Small"]) / (N - sum(sizes)))
} else {
prop_Lw <- append(prop_Lw, sum(b_df$wv[b_df$overall_tStep == t & b_df$size == "Large"]) / sum(sizes))
prop_Sw <- append(prop_Sw, sum(b_df$wv[b_df$overall_tStep == t & b_df$size == "Small"]) / (N - sum(sizes)))
}
}
propb_df <- data.frame(
overall_tStep = 0:((tSteps-1)*tides),
prop_Lw,
prop_Sw
)
j <- ggplot() +
geom_vline(aes(xintercept = seq(0, (tides * tSteps), tSteps)), linetype = "dashed", alpha = 0.7) +
geom_line(data= propb_df, aes(x = overall_tStep, y = prop_Lw, colour = "Large"),
show.legend = T, linewidth = 2) +
geom_line(data= propb_df, aes(x = overall_tStep, y = prop_Sw, colour = "Small"),
show.legend = T, linewidth = 2) +
xlab("Timestep") +
ylab("Proportion waving") +
xlim(min(mid_tsteps), max(mid_tsteps)) +
ylim(0, 1) +
theme_bw(base_size = 20) +
scale_colour_manual(values = colours, name = "Size")
#j
doc <- read_pptx(paste("../figures/",filename,".pptx", sep=""))
doc <- add_slide(doc, layout = "Title and Content", master = "Office Theme")
doc <- ph_with(x = doc, value = j, location = ph_location_fullsize())
print(doc, target = paste("../figures/",filename,".pptx", sep=""))
pc <- pc + 1
setTxtProgressBar(pb, pc)
print("All plots made, have a nice day!")
